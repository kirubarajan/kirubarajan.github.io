{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/django-accounts","result":{"data":{"markdownRemark":{"rawMarkdownBody":"\n# Django Accounts\n> Material written for CIS 192: Python Programming at the University of Pennsylvania.\n\nIn this lecture, we dive deeper into the functionality of Django by building a simple note-taking application. However, using our knowledge from last week, this shouldn’t be too difficult. What makes this section interesting are two things:\n\n1. Using form data to accept user input\n2. Using Django’s authentication system to implement user accounts\n\nThese notes include the code (available on the course website) for you to replicate by following along these notes. \n\n## Project Initialization\nWe install Django through pip by using `pip install django`. Then, we can create a new Django project by running `django-admin startproject notes`. We can then `cd` into the folder and run `python manage.py runserver` to view a cute splash screen at `localhost:8000`, confirming our project works. Next, we can create an app named `core` that contains all the features for our app using `python manage.py`. The flat app architecture is sometimes favored in the community and is used by organizations such as DoorDash. For educational purposes, it’s useful to simplify all the Django boilerplate this way. Let’s add this app to our `INSTALLED_APPS` in `notes/settings.py` by adding an element to the array named  `'core'`.\n\n## Basic Views and Templates\nLet’s get a basic “hello world” page running. First, we must consider what URL route we want our page to be displayed on. Then, we must create a *view* function that is invoked when the route is accessed which renders some HTML file. Finally, we must create the HTML template itself. Let’s implement these in reverse order to gain a better understanding.\n\nLet’s first create a splash page for our restaurant. Create a folder named `templates` in our `core` folder. Create a file called `splash.html` in `core/templates` containing:\n\n```python\n<h1> My Notes </h1>\n\n{% for note in notes %}\n    <p>{{note.title}}</p>\n    <p>{{note.body}}</p>\n{% endfor %}\n```\n\nFeel free to open up the file in your favourite web browser to see how the page looks. Next, let’s define a *view* in `core/views.py`. Add the following code to `view.py`:\n\n```python\ndef splash(request):\n    return render(request, \"splash.html\", {})\n```\n\nAssign a route to this view by opening `notes/urls.py` and importing the view we wrote by adding `from core.views imoprt splash` to the top of the file. Also import the `path` module from Django (so we don’t have to write any regular expressions) using `from django.urls import path`. Finally, we specify the route by appending the route, view and name to the `urlpatterns` list the route specification:\n\n```python\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    path('', splash, name='splash'),\n]\n```\n  \nFinally, if we open our browser to `localhost:8000`, we should see our splash page!\n\n## Defining and Querying Notes\nLet’s define a simple notes model in `core/models.py`.\n\n```python\n\nmax_length = 200\n\nclass Note(models.Model):\n    title = models.CharField(max_length=max_length)\n    body = models.TextField()\n    created_at = models.DateTimeField(auto_now=True)\n    author = models.ForeignKey(User, on_delete=models.DO_NOTHING)\n```\n\nThe only particularly interesting thing model field about this `Note` model is the `ForeignKey` field. A *foreign key* in a relational database is a link from one model (or /table/) to another. This structures the data in a relational way so that querying each note won’t just return an author id, but the author object itself. This is one of the benefits of using a relationship database: simple querying of multiple models that have relations. \n\nNote that this foreign key makes a reference to the User object (predefined by Django) and as such we have to import it by adding `from django.contrib.auth.models import User` to the top of the models file. In our views file, let’s query this model as before by importing the model using `from core.models import Note`. Then, let’s get all the instances in the `splash` view by using `Note.objects.all()`. We pass all the notes through to the view as usual. Add this model to our admin page in `admin.py` and create a superuser using `python manage.py createsuperuser`. Create a few notes at `localhost:8000/admin` and make sure they show up on our `splash` view for a quick sanity check.\n\nOur app is now in a similar state of functionality to our previous restaurant app. However, it would be nice to incorporate some sense of identity using accounts. In the following sections, we’ll extend this application to work with user input to create accounts and new notes.\n\n## Working with Form Data\nLet’s start by adding a way for us to accept user input to create new notes (without authentication required). To do this, let’s add a form to our splash page in `splash.html` that looks like this:\n\n```python\n<form method=\"POST\" action=\"/\">\n    {% csrf_token %}\n    <p>Create Note</p>\n    <input name=\"title\" placeholder=\"title\" />\n    <input name=\"body\" placeholder=\"body\" />\n    <input type=\"submit\" value=\"Create\"/>\n</form>\n```\n\nA form in HTML is a way to obtain user input. It operates by defining fields with unique names (that will eventually correspond to variable names in Python) and a submit field that will make either a GET or POST request to a specific route defined using the `method` and `action` parameters.\n\nNote that in this case, we’re making a POST request to the `/` route, which we already use to render a template, accepting a GET request by default. Let’s edit our splash view to handle a possible POST request before rendering a template. We can do this by checking if `request.method` is equal to `“POST”` before handling our associated post logic. In particular, we can retrieve our POST request parameters by using the dictionary `request.POST`. Let’s print out the note title and body as following in our `splash` view:\n\n```python\nif request.method == \"POST\":\n    print(request.POST[\"title\"], request.POST[\"body\"])\n```\n\nNow that we have the POST parameters, we can create a new note as following:\n\n```python\ntitle = request.POST[\"title\"]\nbody = request.POST[\"body\"]\nNote.objects.create(title=title, body=body, author=request.user)\n```\n\nWe finally redirect the user after creating a new note. It’s important that we are logged in through the admin page in order to have a logged in user to set the foreign key of each note.\n\n## Logging in and Logging out\nWe are finally able to accept user input to use Django’s robust authentication system. We’ll want to create a view that handles both rendering the login/signup forms as well as process their inputs. First, we will create a template containing:\n\n```python\n<h1>Sign Up</h1>\n<form method=\"POST\" action=\"/signup\">\n    {% csrf_token %}\n    <input name=\"username\" placeholder=\"username\" />\n    <input name=\"email\" placeholder=\"email\" />\n    <input name=\"password\" placeholder=\"password\" type=\"password\" />\n    <input type=\"submit\" />\n</form>\n\n<h1>Log In</h1>\n<form method=\"POST\" action=\"/login\">\n    {% csrf_token %}\n    <input name=\"username\" placeholder=\"username\" />\n    <input name=\"password\" placeholder=\"password\" type=\"password\" />\n    <input type=\"submit\" />\n</form>\n```\n\nIt’s important to notice the `name` attribute on each input as this is what serves as the key to index into the `request.POST` dictionary.\n\nNext, We’ll import the `authenticate` and `login` functions from Django with `from django.contrib.auth import authenticate, login`. Then we’ll create a view named `login_` (notice the underscore due to the `login` function existing) containing:\n\n```python\ndef login_(request):\n    if request.method == \"POST\":\n        username = request.POST[\"username\"]\n        password = request.POST[\"password\"]\n        user = authenticate(username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect(\"/\")\n    return render(request, 'signin.html', {})\n```\n\nIf the method is `POST`, then we know we need to be logging in the user after a form submission. Thus, we take the variables for `username` and `password` (which is all Django needs to verify a user) and pass them to the `authenticate` function. This function returns a user object if the username/password combination was valid and `None` otherwise. If the username/password was valid, then we actually log the user in and redirect them home. (It’s good practice to display some error back to the user!) If the request is a `GET` method, we just render the HTML template. \n\nLogout is a very simple view, where we use the `logout` function which we imported from `django.contrib.auth`. We make sure to redirect back to the login page after a successful logout.\n\n```python\ndef logout_(request):\n    logout(request)\n    return redirect(\"/login\")\n```\n\nWe can test these views out (after creating their corresponding URLs) with our admin user!\n\n## Signup and Registration\nNow, we need to give users the ability to create their own users, instead of relying on the `createsuperuser` command. To do this, we import the `User` model from Django’s core library with `from django.contrib.auth.models import User` and call `create_user` on the supplied arguments. This is implemented as follows:\n\n```python\ndef signup_(request):\n    if request.method == \"POST\":\n        user = User.objects.create_user(username=request.POST['username'],\n\t\t\t\t\t\t\t\t\temail=request.POST['email'],\n\t\t\t\t\t\t\t\t\tpassword=request.POST['password'])\n        login(request, user)\n        return redirect('/')\n    return render(request, 'signin.html', {})\n```\n\nEssentially, we just create the user and log them in, same as in our `login_` view. Notice that `create_user` actually returns the user for us to login. In fact, all `create` functions from Django’s ORM will return the created object. This is useful for adding the object as a foreign key after instantiation, for example.\n\nAnd that is all! This is how simple Django authentication with a relational database system can be.","html":"<h1>Django Accounts</h1>\n<blockquote>\n<p>Material written for CIS 192: Python Programming at the University of Pennsylvania.</p>\n</blockquote>\n<p>In this lecture, we dive deeper into the functionality of Django by building a simple note-taking application. However, using our knowledge from last week, this shouldn’t be too difficult. What makes this section interesting are two things:</p>\n<ol>\n<li>Using form data to accept user input</li>\n<li>Using Django’s authentication system to implement user accounts</li>\n</ol>\n<p>These notes include the code (available on the course website) for you to replicate by following along these notes. </p>\n<h2>Project Initialization</h2>\n<p>We install Django through pip by using <code class=\"language-text\">pip install django</code>. Then, we can create a new Django project by running <code class=\"language-text\">django-admin startproject notes</code>. We can then <code class=\"language-text\">cd</code> into the folder and run <code class=\"language-text\">python manage.py runserver</code> to view a cute splash screen at <code class=\"language-text\">localhost:8000</code>, confirming our project works. Next, we can create an app named <code class=\"language-text\">core</code> that contains all the features for our app using <code class=\"language-text\">python manage.py</code>. The flat app architecture is sometimes favored in the community and is used by organizations such as DoorDash. For educational purposes, it’s useful to simplify all the Django boilerplate this way. Let’s add this app to our <code class=\"language-text\">INSTALLED_APPS</code> in <code class=\"language-text\">notes/settings.py</code> by adding an element to the array named  <code class=\"language-text\">&#39;core&#39;</code>.</p>\n<h2>Basic Views and Templates</h2>\n<p>Let’s get a basic “hello world” page running. First, we must consider what URL route we want our page to be displayed on. Then, we must create a <em>view</em> function that is invoked when the route is accessed which renders some HTML file. Finally, we must create the HTML template itself. Let’s implement these in reverse order to gain a better understanding.</p>\n<p>Let’s first create a splash page for our restaurant. Create a folder named <code class=\"language-text\">templates</code> in our <code class=\"language-text\">core</code> folder. Create a file called <code class=\"language-text\">splash.html</code> in <code class=\"language-text\">core/templates</code> containing:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span> My Notes <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> note <span class=\"token keyword\">in</span> notes <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfor <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Feel free to open up the file in your favourite web browser to see how the page looks. Next, let’s define a <em>view</em> in <code class=\"language-text\">core/views.py</code>. Add the following code to <code class=\"language-text\">view.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">splash</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"splash.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Assign a route to this view by opening <code class=\"language-text\">notes/urls.py</code> and importing the view we wrote by adding <code class=\"language-text\">from core.views imoprt splash</code> to the top of the file. Also import the <code class=\"language-text\">path</code> module from Django (so we don’t have to write any regular expressions) using <code class=\"language-text\">from django.urls import path</code>. Finally, we specify the route by appending the route, view and name to the <code class=\"language-text\">urlpatterns</code> list the route specification:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    url<span class=\"token punctuation\">(</span><span class=\"token string\">r'^admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> splash<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'splash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Finally, if we open our browser to <code class=\"language-text\">localhost:8000</code>, we should see our splash page!</p>\n<h2>Defining and Querying Notes</h2>\n<p>Let’s define a simple notes model in <code class=\"language-text\">core/models.py</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">max_length <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span>max_length<span class=\"token punctuation\">)</span>\n    body <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    created_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    author <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>DO_NOTHING<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The only particularly interesting thing model field about this <code class=\"language-text\">Note</code> model is the <code class=\"language-text\">ForeignKey</code> field. A <em>foreign key</em> in a relational database is a link from one model (or /table/) to another. This structures the data in a relational way so that querying each note won’t just return an author id, but the author object itself. This is one of the benefits of using a relationship database: simple querying of multiple models that have relations. </p>\n<p>Note that this foreign key makes a reference to the User object (predefined by Django) and as such we have to import it by adding <code class=\"language-text\">from django.contrib.auth.models import User</code> to the top of the models file. In our views file, let’s query this model as before by importing the model using <code class=\"language-text\">from core.models import Note</code>. Then, let’s get all the instances in the <code class=\"language-text\">splash</code> view by using <code class=\"language-text\">Note.objects.all()</code>. We pass all the notes through to the view as usual. Add this model to our admin page in <code class=\"language-text\">admin.py</code> and create a superuser using <code class=\"language-text\">python manage.py createsuperuser</code>. Create a few notes at <code class=\"language-text\">localhost:8000/admin</code> and make sure they show up on our <code class=\"language-text\">splash</code> view for a quick sanity check.</p>\n<p>Our app is now in a similar state of functionality to our previous restaurant app. However, it would be nice to incorporate some sense of identity using accounts. In the following sections, we’ll extend this application to work with user input to create accounts and new notes.</p>\n<h2>Working with Form Data</h2>\n<p>Let’s start by adding a way for us to accept user input to create new notes (without authentication required). To do this, let’s add a form to our splash page in <code class=\"language-text\">splash.html</code> that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">&lt;</span>form method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span> action<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> csrf_token <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Create Note<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"body\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"body\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"Create\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></code></pre></div>\n<p>A form in HTML is a way to obtain user input. It operates by defining fields with unique names (that will eventually correspond to variable names in Python) and a submit field that will make either a GET or POST request to a specific route defined using the <code class=\"language-text\">method</code> and <code class=\"language-text\">action</code> parameters.</p>\n<p>Note that in this case, we’re making a POST request to the <code class=\"language-text\">/</code> route, which we already use to render a template, accepting a GET request by default. Let’s edit our splash view to handle a possible POST request before rendering a template. We can do this by checking if <code class=\"language-text\">request.method</code> is equal to <code class=\"language-text\">“POST”</code> before handling our associated post logic. In particular, we can retrieve our POST request parameters by using the dictionary <code class=\"language-text\">request.POST</code>. Let’s print out the note title and body as following in our <code class=\"language-text\">splash</code> view:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now that we have the POST parameters, we can create a new note as following:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">title <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span>\nbody <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">]</span>\nNote<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span>title<span class=\"token punctuation\">,</span> body<span class=\"token operator\">=</span>body<span class=\"token punctuation\">,</span> author<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We finally redirect the user after creating a new note. It’s important that we are logged in through the admin page in order to have a logged in user to set the foreign key of each note.</p>\n<h2>Logging in and Logging out</h2>\n<p>We are finally able to accept user input to use Django’s robust authentication system. We’ll want to create a view that handles both rendering the login/signup forms as well as process their inputs. First, we will create a template containing:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Sign Up<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>form method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span> action<span class=\"token operator\">=</span><span class=\"token string\">\"/signup\"</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> csrf_token <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Log In<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>form method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span> action<span class=\"token operator\">=</span><span class=\"token string\">\"/login\"</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> csrf_token <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></code></pre></div>\n<p>It’s important to notice the <code class=\"language-text\">name</code> attribute on each input as this is what serves as the key to index into the <code class=\"language-text\">request.POST</code> dictionary.</p>\n<p>Next, We’ll import the <code class=\"language-text\">authenticate</code> and <code class=\"language-text\">login</code> functions from Django with <code class=\"language-text\">from django.contrib.auth import authenticate, login</code>. Then we’ll create a view named <code class=\"language-text\">login_</code> (notice the underscore due to the <code class=\"language-text\">login</code> function existing) containing:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">login_</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">:</span>\n        username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">]</span>\n        password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span>\n        user <span class=\"token operator\">=</span> authenticate<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> user <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            login<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'signin.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the method is <code class=\"language-text\">POST</code>, then we know we need to be logging in the user after a form submission. Thus, we take the variables for <code class=\"language-text\">username</code> and <code class=\"language-text\">password</code> (which is all Django needs to verify a user) and pass them to the <code class=\"language-text\">authenticate</code> function. This function returns a user object if the username/password combination was valid and <code class=\"language-text\">None</code> otherwise. If the username/password was valid, then we actually log the user in and redirect them home. (It’s good practice to display some error back to the user!) If the request is a <code class=\"language-text\">GET</code> method, we just render the HTML template. </p>\n<p>Logout is a very simple view, where we use the <code class=\"language-text\">logout</code> function which we imported from <code class=\"language-text\">django.contrib.auth</code>. We make sure to redirect back to the login page after a successful logout.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">logout_</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    logout<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can test these views out (after creating their corresponding URLs) with our admin user!</p>\n<h2>Signup and Registration</h2>\n<p>Now, we need to give users the ability to create their own users, instead of relying on the <code class=\"language-text\">createsuperuser</code> command. To do this, we import the <code class=\"language-text\">User</code> model from Django’s core library with <code class=\"language-text\">from django.contrib.auth.models import User</code> and call <code class=\"language-text\">create_user</code> on the supplied arguments. This is implemented as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">signup_</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">:</span>\n        user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\temail<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\tpassword<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        login<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'signin.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Essentially, we just create the user and log them in, same as in our <code class=\"language-text\">login_</code> view. Notice that <code class=\"language-text\">create_user</code> actually returns the user for us to login. In fact, all <code class=\"language-text\">create</code> functions from Django’s ORM will return the created object. This is useful for adding the object as a foreign key after instantiation, for example.</p>\n<p>And that is all! This is how simple Django authentication with a relational database system can be.</p>","frontmatter":{"title":"Django Accounts Tutorial"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pathSlug":"/blog/django-accounts"}}}