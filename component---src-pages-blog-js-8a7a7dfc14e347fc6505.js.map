{"version":3,"sources":["webpack:///./src/components/Tag.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/pages/blog.js"],"names":["Tag","props","href","name","style","marginTop","class","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","query","Blog","edges","data","allMarkdownRemark","className","charSet","src","marginBottom","map","edge","frontmatter","node","key","path","color","fontSize","date","to","title","excerpt","tags","tag"],"mappings":"0IAmBeA,IANH,SAACC,GACX,OACE,uBAAGC,KAAM,SAAWD,EAAME,MAA1B,IAAiC,0BAAMC,MAAO,CAACC,UAAW,UAAWC,MAAO,QAX7DH,EAWgFF,EAAME,KAV3F,oBAARA,EAAmC,mBAC3B,YAARA,EAA2B,qBACnB,+BAARA,EAA8C,sBACtC,SAARA,EAAwB,sBAChB,eAARA,EAA8B,sBACtB,YAARA,EAA2B,2BAA/B,IAKmC,IAA6EF,EAAME,KAAnF,KAAjC,KAXJ,IAAmBA,I,kCCJnB,sGAcyBI,QAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV,O,kCCPX,sHAoDaC,EAAK,YAoBHC,UAlEF,SAAC,GAAY,IAChBC,EADe,EAAVC,KACUC,kBAAfF,MAER,OACE,6BAASG,UAAU,UAAUvB,MAAO,CAAC,WAAc,SACjD,kBAAC,IAAD,KACE,0BAAMwB,QAAQ,UACd,wCAGF,yBAAKD,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,wBAAf,KACA,yBAAKA,UAAU,UACb,kBAAC,IAAD,MACA,4BAAQA,UAAU,oBAChB,yBAAKE,IAAK,qBAEZ,wBAAIF,UAAU,SAAd,aACA,iIAEA,2BACE,6BACA,uBAAGvB,MAAO,CAAC0B,aAAc,WAAW,4BAAQH,UAAU,iBAAlB,cACnCH,EAAMO,KAAI,SAAAC,GAAS,IACXC,EAAeD,EAAKE,KAApBD,YACP,OACE,yBAAKN,UAAU,MAAMQ,IAAKF,EAAYG,KAAMhC,MAAO,CAACiC,MAAO,OAAQP,aAAc,SAC/E,0BAAM1B,MAAO,CAACkC,SAAU,YAAaL,EAAYM,KAAjD,KADF,IACiE,6BAC/D,kBAAC,IAAD,CAAMC,GAAIP,EAAYG,MACtB,2BAAIH,EAAYQ,QAEhB,uBAAGrC,MAAO,CAACkC,SAAU,UAAWR,aAAc,SAAUzB,UAAW,WAAY4B,EAAYS,SAC1FT,EAAYU,KAAKZ,KAAI,SAAAa,GAAG,OAAI,kBAAC,IAAD,CAAKzC,KAAMyC,aAMlD,yBAAKjB,UAAU","file":"component---src-pages-blog-js-8a7a7dfc14e347fc6505.js","sourcesContent":["import React from 'react'\n\nimport '../styles/styles.sass'\n\nfunction getColour(name) {\n  if (name == \"machine learning\") return \"is-light is-info\";\n  if (name == \"personal\") return \"is-light is-danger\";\n  if (name == \"natural language processing\") return \"is-light is-success\";\n  if (name == \"notes\") return \"is-light is-warning\";\n  if (name == \"programming\") return \"is-light is-primary\";\n  if (name == \"research\") return \"is-light is-primary\";\n}\n\nconst Tag = (props) => {\n  return (\n    <a href={\"/tags/\" + props.name}> <span style={{marginTop: \"0.3rem\"}} class={\"tag \" + getColour(props.name)}> {props.name} </span> </a>\n  )\n}\n\nexport default Tag;","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\";\nimport { graphql, Link } from 'gatsby';\nimport { Helmet } from \"react-helmet\"\nimport Nav from '../components/Nav';\nimport Tag from '../components/Tag';\n\nconst Blog = ({data}) => {\n  const { edges } = data.allMarkdownRemark;\n\n  return (\n    <section className=\"section\" style={{\"paddingTop\": \"1rem\"}}>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Blog</title>\n      </Helmet>\n      \n      <div className=\"container\">\n        <div className=\"columns\">\n          <div className=\"column is-one-fourth\"> </div>\n          <div className=\"column\">  \n            <Nav />\n            <figure className=\"image is-128x128\">\n              <img src={\"/img/papers.svg\"} />\n            </figure>\n            <h1 className=\"title\"> my blog </h1>\n            <p>I like writing about food, my work and (sometimes)\n              my personal life. My views are entirely my own.</p>\n            <p>\n              <br />\n              <p style={{marginBottom: \"0.5rem\"}}><strong className=\"has-text-grey\">All Posts</strong></p>\n              {edges.map(edge => {\n                const {frontmatter} = edge.node;\n                return (\n                  <div className=\"box\" key={frontmatter.path} style={{color: \"grey\", marginBottom: \"1rem\"}}>\n                    <span style={{fontSize: \"0.75rem\"}}>{frontmatter.date} </span> <br />\n                    <Link to={frontmatter.path}>\n                    <p>{frontmatter.title}</p>\n                    </Link>\n                    <p style={{fontSize: \"0.85rem\", marginBottom: \"0.5rem\", marginTop: \"0.1rem\"}}>{frontmatter.excerpt}</p>\n                    {frontmatter.tags.map(tag => <Tag name={tag} />)} \n                  </div>\n                )\n              })}\n            </p>\n          </div>\n          <div className=\"column\"></div>\n        </div>\n      </div>\n    </section>\n  )\n};\n\nexport const query = graphql`\n  query BlogQuery {\n    allMarkdownRemark (\n      sort: {order: DESC, fields: [frontmatter___date]}\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            excerpt\n            path\n            date\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Blog;"],"sourceRoot":""}